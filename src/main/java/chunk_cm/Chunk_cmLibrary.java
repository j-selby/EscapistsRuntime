package chunk_cm;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.IntByReference;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
/**
 * JNA Wrapper for library <b>chunk_cm</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class Chunk_cmLibrary implements Library {
    public static final String JNA_LIBRARY_NAME = "chunk_cm";
    public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(Chunk_cmLibrary.JNA_LIBRARY_NAME);
    static {
        Native.register(Chunk_cmLibrary.class, Chunk_cmLibrary.JNA_NATIVE_LIB);
    }

    /**
     * Native defs
     *
     cdef void prepare_transform(unsigned char * trans, int size)
     cdef void transform(unsigned char * data, int size,
     unsigned char * trans)

     */

    /**
     * Original signature : <code>void prepare_transform(d_u8*, d_u32)</code><br>
     * <i>native declaration : line 10</i><br>
     * @deprecated use the safer methods {@link #prepare_transform(java.nio.ByteBuffer, int)} and {@link #prepare_transform(com.sun.jna.Pointer, int)} instead
     */
    @Deprecated
    public static native void prepare_transform(Pointer a, int b);
    /**
     * Original signature : <code>void prepare_transform(d_u8*, d_u32)</code><br>
     * <i>native declaration : line 10</i>
     */
    public static native void prepare_transform(ByteBuffer a, int b);
    /**
     * Original signature : <code>int z(d_u32*, d_u8*, d_u8)</code><br>
     * <i>native declaration : line 43</i><br>
     * @deprecated use the safer methods {@link #z(java.nio.IntBuffer, java.nio.ByteBuffer, byte)} and {@link #z(com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, byte)} instead
     */
    @Deprecated
    public static native int z(IntByReference a, Pointer b, byte c);
    /**
     * Original signature : <code>int z(d_u32*, d_u8*, d_u8)</code><br>
     * <i>native declaration : line 43</i>
     */
    public static native int z(IntBuffer a, ByteBuffer b, byte c);
    /**
     * Original signature : <code>void transform(d_u8*, int, d_u8*)</code><br>
     * <i>native declaration : line 95</i><br>
     * @deprecated use the safer methods {@link #transform(java.nio.ByteBuffer, int, java.nio.ByteBuffer)} and {@link #transform(com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    public static native void transform(Pointer a, int b, Pointer c);
    /**
     * Original signature : <code>void transform(d_u8*, int, d_u8*)</code><br>
     * <i>native declaration : line 95</i>
     */
    public static native void transform(ByteBuffer a, int b, ByteBuffer c);
}
